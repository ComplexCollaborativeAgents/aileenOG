##!
# @file
#
# @created smohan 20200114
sp {filter-scene*apply*elaborate-with-concept
    (state <s>    ^name filter-scene
                  ^operator <op>
                  ^epmem.present-id <pid>
                  ^io <io>)
    (<io>    ^output-link <ol>
             -^input-link.concept-memory.result)
    (<op>    ^name elaborate-with-concept
             ^gpool <gpool>
             ^concept <concept>)
-->
    (<ol>    ^concept-memory.query <query>)
    (<query>    ^pattern <pat>
                ^facts <facts>)
    (<pat>    ^lfirst isa
              ^lsecond ?o
              ^lthird <concept>)
    }

sp {filter-scene*apply*elaborate-with-concept*object*attrs*color*shape
    (state <s>    ^name filter-scene
                  ^operator <op>
                  ^io.output-link <ol>
                  ^world.objects.object <cso>)
                 # ^topstate._params.relevant-percept-set.type <attr>)
    (<ol>    ^concept-memory.query.facts <facts>)
    (<op>    ^name elaborate-with-concept)
    (<cso>    ^<< color shape >> <val>
              ^id_string <id_string>)
-->
    (<facts>    ^fact <f>)
    (<f>    ^lfirst isa
            ^lsecond <id_string>
            ^lthird <val>)
    }

sp {filter-scene*apply*elaborate-with-concept*object*attrs*color*size
    (state <s>    ^name filter-scene
                  ^operator <op>
                  ^io.output-link <ol>
                  ^world.objects.object <cso>)
                 # ^topstate._params.relevant-percept-set.type <attr>)
    (<ol>    ^concept-memory.query.facts <facts>)
    (<op>    ^name elaborate-with-concept)
    (<cso>    ^size <val>
              ^id_string <id_string>)
-->
    (<facts>    ^fact <f>)
    (<f>    ^lfirst size
            ^lsecond <id_string>
            ^lthird <val>)
    }


sp {filter-scene*apply*elaborate-with-concept*object*matches
    (state <s>    ^name filter-scene
                  ^operator <op>
                  ^io.input-link.concept-memory.result <cm>
                  ^world.objects <cs>)
    (<cs>    ^object <obj>)
    (<obj>    ^id_string <id-name>)
    (<cm>    ^matches.match <m>)
    (<m>    ^first isa
            ^second <id-name>
            ^third <val>)
    (<op>    ^name elaborate-with-concept
             ^concept <con>)
-->
    (<obj>    ^isa <val>)
    }

sp {filter-scene*apply*elaborate-with-concept*object*matches*status
    (state <s>    ^name filter-scene
                  ^operator <op>
                  ^io.input-link.concept-memory.result <cm>
                  ^world.objects <cs>)
    (<cs>    ^object <obj>)
    (<obj>    ^id_string <id-name>)
    (<cm>    ^matches <m>)
    (<op>    ^name elaborate-with-concept
             ^concept <con>)
    (<obj>    ^isa <con>)
-->
    (<s>    ^elaborated-with <con>)
    }

sp {filter-scene*apply*elaborate-with-concept*object*matches*status*none
    (state <s>    ^name filter-scene
                  ^operator <op>
                  ^io.input-link.concept-memory.result <cm>
                  ^candidate-set <cs>)
    (<cm>    ^matches <m>)
    (<m>    -^match)
    (<op>    ^name elaborate-with-concept
             ^concept <con>)
-->
    (<s>    ^elaborated-with <con>)
    }